<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Command Template</Title>
      <Shortcut>command</Shortcut>
      <Description>Code snippet for a command template</Description>
      <Author>Eric Patton</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>classname</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
        <Literal>
          <ID>returntype</ID>
          <ToolTip>Return type</ToolTip>
          <Default>ReturnType</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        //// Paste these using statements at the top of the file and uncomment them
        //using PlanetaryExplorationLogs.API.Data.Context;
				//using PlanetaryExplorationLogs.API.Utility.Patterns;
				//using System.Net;
				//using static PlanetaryExplorationLogs.API.Utility.Patterns.CommandQuery;
				
				public class $classname$_Command : RequestBase<$returntype$>
				{
					private readonly int _someInputParameter;

					public $classname$_Command(PlanetExplorationDbContext context,int someInputParameter)
						: base(context)
					{
						_someInputParameter = someInputParameter;
					}

					// The authorizer, validator, and handler run in that order. If any fail, the query will not be executed.

					// The authorizer is optional and can be removed if not needed
					public override IAuthorizer Authorizer => new $classname$_Authorizer(DbContext);

					// The validator is optional and can be removed if not needed
					public override IValidator Validator =>
						new $classname$_Validator(DbContext, _someInputParameter);

					// The handler is mandatory to have for every command
					public override IHandler<$returntype$> Handler =>
						new $classname$_Handler(DbContext, _someInputParameter);
				}

				// The authorizer class is responsible for any additional authorization logic
				public class $classname$_Authorizer : AuthorizerBase
				{
					public $classname$_Authorizer(PlanetExplorationDbContext context)
						: base(context)
					{
					}

					public override async Task<RequestResult> AuthorizeAsync()
					{
						// Obviously, this is dummy authorization logic. Replace it with your own.
						// Return AuthorizedResultAsync() if the operation is authorized, UnauthorizedResultAsync() otherwise.
						return await AuthorizedResultAsync();
					}
				}

				// The validator class is responsible for validating things before the query is executed
				public class $classname$_Validator : ValidatorBase
				{
					private readonly int _someInputParameter;

					public $classname$_Validator(PlanetExplorationDbContext context, int someInputParameter)
						: base(context)
					{
						_someInputParameter = someInputParameter;
					}

					public override async Task<RequestResult> ValidateAsync()
					{
						// Obviously, this is dummy validation logic. Replace it with your own.
						await Task.CompletedTask;

						if (_someInputParameter < 0)
						{
							return await InvalidResultAsync(
								HttpStatusCode.BadRequest,
								"The input parameter needs to be greater than zero for some reason.");
						}

						// You can also check things in the database, if needed, such as checking if a record exists
						return await ValidResultAsync();
					}
				}

				// The handler class is responsible for executing the query
				public class $classname$_Handler : HandlerBase<$returntype$>
				{
					private readonly int _someInputParameter;

					public $classname$_Handler(PlanetExplorationDbContext context, int someInputParameter)
						: base(context)
					{
						_someInputParameter = someInputParameter;
					}

					public override async Task<RequestResult<$returntype$>> HandleAsync()
					{
						// Obviously, this is a dummy query. Replace it with your own.
						// Write your command logic here. This can be creating, updating, or deleting data.
						await Task.CompletedTask;

						var mathematical = _someInputParameter * _someInputParameter;

						// Return the data
						var result = new RequestResult<$returntype$>
						{
							Data = mathematical //If you don't need to return any data, you can set this to something like 0
						};

						return result;
					}
				}
      ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>